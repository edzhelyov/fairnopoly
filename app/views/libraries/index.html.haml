-#
-# Farinopoly - Fairnopoly is an open-source online marketplace.
-# Copyright (C) 2013 Fairnopoly eG
-#
-# This file is part of Farinopoly.
-#
-# Farinopoly is free software: you can redistribute it and/or modify
-# it under the terms of the GNU Affero General Public License as
-# published by the Free Software Foundation, either version 3 of the
-# License, or (at your option) any later version.
-#
-# Farinopoly is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU Affero General Public License for more details.
-#
-# You should have received a copy of the GNU Affero General Public License
-# along with Farinopoly.  If not, see <http://www.gnu.org/licenses/>.
-#
.Libraries
  - if policy(@library).create?
    %h3= t('library.new')
    = semantic_form_for(@library,:url => user_libraries_path(@user),:html => { :class => "form-vertical"}) do |f|
      = f.inputs do
        = f.input :name
      = f.actions do
        = f.action :submit , :value => t('library.create'), :button_html => {:class => "Btn"}
  .Accordion--activated
    - @libraries.each do |library|
      - unless library.new_record?
        = accordion_item "library"+library.id.to_s , :title => library.name  do
          - if policy(library).update? || policy(library).destroy?
            - if library.public?
              %p= t 'library.visibility.public'
            - else
              %p= t 'library.visibility.private'
          - if policy(library).update?
            %p.Libraries-settings-left
              %a.Btn.Library-showsettings
                = t('common.actions.edit')
          - if policy(library).destroy?
            %p.Libraries-settings-right
              = link_to t('common.actions.destroy') , user_library_path(@user.id, library.id.to_s) , :class => "Btn Btn--gray" ,:confirm => t('library.delete_confirm', :name => library.name) , :method => :delete

          - if policy(library).update?
            = semantic_form_for(library, :url => user_library_path(@user.id,library.id.to_s), :html => {:class => "Library-settings"}) do |f|
              = f.inputs do
                = f.input :name
                = f.input :public, :label => false
              = f.actions do
                = f.action :submit, :label => :update, :button_html => {:class => "Btn"}
          - if library.library_elements.empty?
            %p.Libraries-settings-clear= t('library.no_products')
          - else
            %ul.thumbnails
              - library.library_elements.each do |library_element|
                - if policy(library_element).show?
                  %li.span3
                    .thumbnail.white{:style => "position: relative;"}
                      .in-image-container-library
                        - if policy(library_element).destroy?
                          - html = glyphicons("awesome-icon-remove")
                          = link_to html.html_safe, user_library_element_path(@user,library_element) ,:method => :delete ,:class=>"pull-right"
                        = link_to image_tag(library_element.article.title_image ? library_element.article.title_image.image.url(:thumb) : "missing.png" , :class=> "title_image"), library_element.article
                        = features_label library_element.article
                        = condition_label library_element.article
                      .caption
                        %h5= link_to truncate(library_element.article_title, :length => 25), library_element.article
                        %h5= humanized_money_with_symbol library_element.article.price
                        - if policy(library_element).update?
                          = semantic_form_for(library_element, :url => user_library_element_path(@user,library_element), :html => {:class => "form-inline"}) do |f|
                            = f.input :library, :collection => current_user.libraries,  :include_blank => false , :input_html => { :class => "btn-fill boarder-no-bottom"}, :label => false
                            = f.submit t('common.actions.move'), :class => "Btn"
